#Written by Sian Bray on 8th March 2018
#This script combines demultiplex output tables from the NextSeq, condensing all rows with the same sample ID into one summed row
#It takes tab delimited files. To create these files:
	#Find laneBarcode.html, this is in the Reports folder generated by bcl2FASTQ: Reports/html/<your_run>/all/all/all
	#Copy and paste the lane summary into excel.
	#The column headers should be: Lane, Project, Sample, Barcode sequence, PF Clusters, % of the lane, % Perfect barcode, % One mismatch barcode, Yield (Mbases), % PF clusters, % >=Q30 bases, Mean Quality score
		#you can combine multiple demultiplex output sheets by only copying the data (no header) from sheet 2+. Just make sure the names under Sample are identical!
	#Save as a tab delimitated file (.txt). Excel formatting is stupid and will break the header into two rows, this is expected by my code.
#Put the input file and this script into the same directory and run from terminal (use the command: python combine_demultiplex_statistics.py)
#The script will create a new tab delaminated file with all the values summed (PF Clusters and Yield) or averaged (percentages only)

original_demultiplex_file=open("demultiplex.txt", "r") #This is your input file
unmerged_file=original_demultiplex_file.readlines() #each lin becomes a string in a list
merged_file=open("demultiplex_merged.txt", "w+") #This is the combined file that will be created, rename as you like
to_print_as_merged_file=list() #The combined values will be stored here, this is the list that will be written as an output file. Referred to as "The List" from here.
line_count=0
number_of_lines=len(unmerged_file)

while line_count<number_of_lines: #This sums all the lines by sample
	current_line=unmerged_file[line_count].replace("\t", "\t***") #This replaces \t with \t*** so the file can be split at the tab without loosing it.
	current_line_no_commas_etc=current_line.replace(",", "").replace("'", "").replace('"', "") #This removes any nonsense that excel added to the numbers (ug)
	current_line_as_list=current_line_no_commas_etc.split("***") #Splits the line (a string) into a list by column
	if (current_line_as_list[2] in to_print_as_merged_file) == False: #Adds samples that haven't come up yet to "The List"
		to_print_as_merged_file=to_print_as_merged_file+current_line_as_list
	else: #If the current sample is already on "The List" this else adds the numbers in the current sample to those already on "The List"
		repeat_location=to_print_as_merged_file.index(current_line_as_list[2])
		int(repeat_location)
		to_print_count=2
		current_line_count=4
		while current_line_count<12:
			to_print_as_merged_file[repeat_location+to_print_count]=to_print_as_merged_file[repeat_location+to_print_count].replace("\t", "")
			current_line_as_list[current_line_count]=current_line_as_list[current_line_count].replace("\t", "")
			to_print_as_merged_file[repeat_location+to_print_count]=float(to_print_as_merged_file[repeat_location+to_print_count])+float(current_line_as_list[current_line_count])
			to_print_as_merged_file[repeat_location+to_print_count]=str(to_print_as_merged_file[repeat_location+to_print_count])+"\t"
			to_print_count+=1
			current_line_count+=1
	line_count=line_count+1
#While loop ends here

final_length=len(to_print_as_merged_file)
final_count=29

while final_count<final_length: #This while loop divides the percentages and averages by 4 to get the summed proportion (i.e. because 100%+100%+100%+100%=400%)
	semi_final_count=0
	while semi_final_count<7:
		if semi_final_count==3:
			semi_final_count+=1
		else:
			to_print_as_merged_file[final_count+semi_final_count]=to_print_as_merged_file[final_count+semi_final_count].replace("\t", "")
			to_print_as_merged_file[final_count+semi_final_count]=float(to_print_as_merged_file[final_count+semi_final_count])/4 #If you are combining demultiplex sheets from multiple runs this last number (4) should be edited, likely to: (4*number of runs).
			to_print_as_merged_file[final_count+semi_final_count]=(str(to_print_as_merged_file[final_count+semi_final_count])+"\t")
			if final_count+semi_final_count==final_count+6:
				to_print_as_merged_file[final_count+semi_final_count]=to_print_as_merged_file[final_count+semi_final_count]+"\n"
			semi_final_count+=1
	final_count=final_count+12
#While loop ends here

for item in to_print_as_merged_file: #This writes "The List" to the new combined file
	merged_file.write(item)
	
merged_file.close()
original_demultiplex_file.close()

print("Demultiplex Sheet concatonated! Win :)")